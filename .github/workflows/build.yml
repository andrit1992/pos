# name of your github action
name: CI
# this will help you specify where to run 
on:
  push:
    branches:
    # this will run on the electron branch
      - electron
# this is where the magic happens, each job happens in parallel btw
jobs:
  build_on_mac:
    runs-on: macOS-latest
    steps:
    - uses: actions/checkout@master
      with:
        ref: electron
    - uses: actions/setup-node@master
      with:
        node-version: 10.16
    - name: see directory
      run: ls
build_on_win:
    runs-on: windows-2016
    steps:
    - uses: actions/checkout@master
      with:
        ref: feature/github-actions        
    - uses: actions/setup-node@master
      with:
        node-version: 10.16
    - name: see directory
      run: ls
Step 1. actions/checkout@master
So like I said uses will pull from actions/checkout@master and execute…
So this first step what I’m doing is essentially git clone -ing your repo, then switching to your branch.
actions/checkout@master is confusing but it’s essentially using the master branch of the git repo github.com/actions/checkout — which was written by someone at github action’s team where it’ll just clone your repo. They did a good job because if it’s a private repo you don’t have to add github tokens and get complicated
ref: electron is specifying which branch to checkout
for those of your who need more options
Step 2. actions/setup-node@master
This step uses https://github.com/actions/setup-node this github repo, again written by someone at the github actions team.
All this does is checks out which node version you need to install in your VM. We use 10.16 but if you need another version just edit this.
Step 3. Make sure you see something familiar and that git clone worked
This step is just a debug step to make sure that step 1 worked and you git cloned your repo. ls should reveal your repo’s directory structure and you should see everything.
Just to quickly recap and make sure you’re seeing the same thing:

Go to github.com actions tab, and make sure you pushed to the correct branch and it’ll start an action workflow run automatically.
If you click on a specific workflow you’ll see each step running, if you click on that step you can see the output. From the above script you want to be able to see your ls directory like in the screenshot I have.
Now that you kinda know how things work, I’ll give you the goods:
name: CI
on:
  push:
    branches:
      - electron
jobs:
  build_on_mac:
    runs-on: macOS-latest
    steps:
    - uses: actions/checkout@master
      with:
        ref: electron
    - uses: actions/setup-node@master
      with:
        node-version: 10.16
    - name: see directory in electron_dist
      run: ls ./electron
    - name: add key to single keychain
      run: security import ./electron/june-ai-single2-certs-electron.p12 -P ${{ secrets.CSC_KEY_PASSWORD }}
    - name: electron mac os security identities
      run: security find-identity -v
    - name: Install dependencies
      run: yarn install
    - name: Build on MacOS
      env:
        ELECTRON: true
        APP_VERSION_NUMBER: 0.5.9
      run: yarn build
    - name: Build Electron
      env:
        ELECTRON: true
        CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
        APP_VERSION_NUMBER: 0.5.9
      run: yarn electron:buildUnix
    - name: see directory
      run: ls
    - name: check env
      run: echo $ELECTRON $FEATHERS_URL
    - name: see directory in electron_dist
      run: ls ./electron_dist
    - uses: lucyio/upload-to-release@master
      with:
        name: lucyio/electron
        path: ./electron_dist
        action: unpublished
        release_id: 0.x.x
        release-repo: lucyio/electron
  
  build_on_win:
    runs-on: windows-2016
    steps:
    - uses: actions/checkout@master
      with:
        ref: feature/github-actions        
    - uses: actions/setup-node@master
      with:
        node-version: 10.16
    - name: install node tools
      run: npm install --global --production windows-build-tools@4.0.0
    - name: install node-gyp
      run: npm install --global node-gyp@latest
    - name: Set node config to use python2.7
      run: npm config set python python2.7
    - name: Set node config to set msvs_version to 2015
      run: npm config set msvs_version 2015
    - name: Work around for Windows Server 2019
      run: set path=%path%;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin
    - name: Install dependencies
      run: yarn install
    - name: check env
      env:
        ELECTRON: true
        APP_VERSION_NUMBER: 0.5.9
      run: set
    - name: Build on Windows
      env:
        ELECTRON: true
        APP_VERSION_NUMBER: 0.5.9
      run: yarn build
    - name: Build Electron
      env:
        ELECTRON: true
        APP_VERSION_NUMBER: 0.5.9
      run: yarn electron:buildWin
    - name: see directory
      run: ls ./electron_dist/squirrel-windows
    - uses: lucyio/upload-to-release@master
      with:
        name: lucyio/electron
        path: ./electron_dist/squirrel-windows
        action: unpublished
        release_id: 0.5.9
        release-repo: lucyio/electron
Quick run through on how this works for macs:
clone your repo
setup nodejs
double check a directory
add a key to the vm’s keychain (I’m not a security expert, I’m pretty sure they delete it but use a developer cert first and test it for signing, apparently they use mac stadium and it’s safe)
debug and output all the security identities that you have for debugging the electron build step and identify if it signed with the correct key
run yarn install
build your web app
build your electron web app
see your directory to check if electron_dist got created
check inside the electron_dist folder to see the contents inside there
use my hacky upload to a github releases page and save it as a draft and dedup by version github actions tool. This will be for another day, but I recommend you get your build out of there with something more simple like https://github.com/JasonEtco/upload-to-release, https://github.com/skx/github-action-publish-binaries, https://github.com/actions/upload-artifact
Quick run through on how this works on windows:
I selected to used windows-2016 because windows-2019 has too many problems with dependencies (I tried for like 2 days and gave up). By the way, they use windows sever 2016 NOT window 10 or whatever you’re normally used to.
clone your repo
setup nodejs
install node tools for windows (I use 4.0.0 because the latest it will get stuck because it’s windows server not windows 10 and it’ll hang)
install node-gyp manually
setup configs msvs_version 2015 because some electron packages I have doesn’t build properly without this (I’m guessing it’s better to have this than not for you, it shouldn’t affect you but comment it out if you don’t need it)
Not entirely sure if I can comment this out or not, but node on windows uses some visual studio libraries when building electron so you might have to set things differently depending on what electron libraries you use. (you can comment this out but it will probably not affect you)
install dependencies
check env — set will print out all your env’s on windows (I think they use command prompt not powershell), what I’ve noticed is you need env on each command your need your envs on because for some reason those envs disappear downstream each step
build web app
build electron web app
peek inside the directories to see if it got built
upload the files to my github releases using my hacky github action to my specific thing I want to do, again, see above, use someone elses until I clean this up for the public

Anyways, proof that it works!
Hope this helps!
